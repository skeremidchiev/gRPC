// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package comm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommServiceClient is the client API for CommService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommServiceClient interface {
	Create(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Reply, error)
	Remove(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Reply, error)
	List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (CommService_ListClient, error)
}

type commServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommServiceClient(cc grpc.ClientConnInterface) CommServiceClient {
	return &commServiceClient{cc}
}

func (c *commServiceClient) Create(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/comm.CommService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServiceClient) Remove(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/comm.CommService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServiceClient) List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (CommService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommService_ServiceDesc.Streams[0], "/comm.CommService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &commServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommService_ListClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type commServiceListClient struct {
	grpc.ClientStream
}

func (x *commServiceListClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommServiceServer is the server API for CommService service.
// All implementations must embed UnimplementedCommServiceServer
// for forward compatibility
type CommServiceServer interface {
	Create(context.Context, *Data) (*Reply, error)
	Remove(context.Context, *Data) (*Reply, error)
	List(*EmptyMessage, CommService_ListServer) error
	mustEmbedUnimplementedCommServiceServer()
}

// UnimplementedCommServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommServiceServer struct {
}

func (UnimplementedCommServiceServer) Create(context.Context, *Data) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCommServiceServer) Remove(context.Context, *Data) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedCommServiceServer) List(*EmptyMessage, CommService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCommServiceServer) mustEmbedUnimplementedCommServiceServer() {}

// UnsafeCommServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommServiceServer will
// result in compilation errors.
type UnsafeCommServiceServer interface {
	mustEmbedUnimplementedCommServiceServer()
}

func RegisterCommServiceServer(s grpc.ServiceRegistrar, srv CommServiceServer) {
	s.RegisterService(&CommService_ServiceDesc, srv)
}

func _CommService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.CommService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServiceServer).Create(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.CommService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServiceServer).Remove(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommServiceServer).List(m, &commServiceListServer{stream})
}

type CommService_ListServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type commServiceListServer struct {
	grpc.ServerStream
}

func (x *commServiceListServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

// CommService_ServiceDesc is the grpc.ServiceDesc for CommService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comm.CommService",
	HandlerType: (*CommServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CommService_Create_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _CommService_Remove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _CommService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app/comm/comm.proto",
}
